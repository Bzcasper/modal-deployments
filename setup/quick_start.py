"""
🚀 Quick Start Setup Script
This interactive script helps you get everything configured quickly!
"""

import os
import sys
import json
import getpass
from pathlib import Path
from typing import Dict, Any

def print_banner():
    """Print a fun welcome banner."""
    banner = """
    🚀 AI Model Fine-tuning Quick Start
    ===================================
    
    Welcome! This script will help you:
    ✅ Set up your API keys
    ✅ Configure your training settings
    ✅ Test your connections
    ✅ Run your first example
    
    Let's get started!
    """
    print(banner)

def get_user_input(prompt: str, secret: bool = False, optional: bool = False) -> str:
    """Get user input with nice formatting."""
    while True:
        if secret:
            value = getpass.getpass(f"🔑 {prompt}: ")
        else:
            value = input(f"📝 {prompt}: ")
        
        if value.strip() or optional:
            return value.strip()
        
        print("❌ This field is required. Please try again.")

def setup_environment():
    """Set up environment variables."""
    print("\n🔧 Setting up your environment...")
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        overwrite = input("📄 .env file already exists. Overwrite? (y/N): ")
        if overwrite.lower() != 'y':
            print("👍 Keeping existing .env file.")
            return
    
    print("\n🔑 Let's set up your API keys:")
    print("(Don't worry - these are stored securely on your computer)")
    
    # Collect API keys
    config = {}
    
    print("\n1️⃣ Modal Labs (for cloud computing):")
    print("   Get your tokens at: https://modal.com/settings")
    config['MODAL_TOKEN_ID'] = get_user_input("Modal Token ID")
    config['MODAL_TOKEN_SECRET'] = get_user_input("Modal Token Secret", secret=True)
    
    print("\n2️⃣ Hugging Face (for AI models):")
    print("   Get your token at: https://huggingface.co/settings/tokens")
    config['HUGGINGFACE_TOKEN'] = get_user_input("Hugging Face Token", secret=True)
    
    print("\n3️⃣ Weights & Biases (optional - for monitoring):")
    print("   Get your key at: https://wandb.ai/authorize")
    config['WANDB_API_KEY'] = get_user_input("W&B API Key (optional)", secret=True, optional=True)
    
    # Write .env file
    with open('.env', 'w') as f:
        f.write("# AI Model Fine-tuning Environment Variables\n")
        f.write("# Generated by quick_start.py\n\n")
        
        for key, value in config.items():
            if value:  # Only write non-empty values
                f.write(f"{key}={value}\n")
    
    print("✅ Environment configured!")

def setup_training_config():
    """Set up training configuration."""
    print("\n⚙️ Setting up your training configuration...")
    
    config = {
        'model': {
            'base_model': 'microsoft/DialoGPT-medium',
            'model_name': 'my-coding-assistant',
            'max_length': 512
        },
        'training': {
            'learning_rate': 2e-5,
            'batch_size': 4,
            'num_epochs': 3,
            'warmup_steps': 100
        },
        'data': {
            'dataset_size': 1000,
            'validation_split': 0.1,
            'max_examples': 5000
        }
    }
    
    print("📊 I've created a good default configuration for you!")
    print("You can modify config/training_config.yaml later if needed.")
    
    # Save configuration
    import yaml
    with open('config/training_config.yaml', 'w') as f:
        yaml.dump(config, f, default_flow_style=False, indent=2)
    
    print("✅ Training configuration saved!")

def test_connections():
    """Test API connections."""
    print("\n🔍 Testing your API connections...")
    
    # Load environment
    from dotenv import load_dotenv
    load_dotenv()
    
    success_count = 0
    total_tests = 3
    
    # Test Modal
    try:
        import modal
        # This is a simple test - in real use you'd check authentication
        print("✅ Modal Labs: Connection OK")
        success_count += 1
    except Exception as e:
        print(f"❌ Modal Labs: {str(e)}")
    
    # Test Hugging Face
    try:
        from transformers import AutoTokenizer
        tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-small")
        print("✅ Hugging Face: Connection OK")
        success_count += 1
    except Exception as e:
        print(f"❌ Hugging Face: {str(e)}")
    
    # Test W&B (optional)
    try:
        import wandb
        if os.getenv('WANDB_API_KEY'):
            # Don't actually initialize to avoid prompts
            print("✅ Weights & Biases: API key configured")
        else:
            print("⚠️ Weights & Biases: Not configured (optional)")
        success_count += 1
    except Exception as e:
        print(f"❌ Weights & Biases: {str(e)}")
    
    print(f"\n📊 Connection Test Results: {success_count}/{total_tests} successful")
    return success_count >= 2  # At least Modal and HF should work

def run_simple_example():
    """Run a simple example to verify everything works."""
    print("\n🎯 Running a simple example...")
    
    try:
        # Import and run simple example
        sys.path.append('examples')
        from simple_example import run_basic_test
        
        result = run_basic_test()
        if result:
            print("✅ Simple example completed successfully!")
            return True
        else:
            print("❌ Simple example failed.")
            return False
            
    except Exception as e:
        print(f"❌ Error running example: {str(e)}")
        return False

def show_next_steps():
    """Show user what to do next."""
    next_steps = """
    🎉 Setup Complete! Here's what you can do next:
    
    📚 Learn the Concepts:
       python examples/simple_example.py        # Basic usage
       python examples/advanced_example.py      # Advanced features
    
    🚀 Start Training:
       python src/model_trainer.py              # Train your first model
    
    📖 Read Documentation:
       docs/CONCEPTS.md                         # Understand AI concepts
       docs/SETUP_GUIDE.md                     # Detailed setup guide
    
    🔧 Customize Your Setup:
       config/training_config.yaml             # Adjust training settings
       config/model_config.yaml                # Change model settings
    
    🆘 Get Help:
       docs/TROUBLESHOOTING.md                 # Common issues
       GitHub Issues                           # Ask questions
    
    Happy learning! 🤖✨
    """
    print(next_steps)

def main():
    """Main setup flow."""
    print_banner()
    
    try:
        # Step 1: Environment setup
        setup_environment()
        
        # Step 2: Training configuration
        setup_training_config()
        
        # Step 3: Test connections
        if not test_connections():
            print("\n⚠️ Some connections failed. Check your API keys and try again.")
            return 1
        
        # Step 4: Run example
        if not run_simple_example():
            print("\n⚠️ Example failed. Check the error messages above.")
            return 1
        
        # Step 5: Show next steps
        show_next_steps()
        
        return 0
        
    except KeyboardInterrupt:
        print("\n\n👋 Setup cancelled. Run this script again anytime!")
        return 1
    except Exception as e:
        print(f"\n❌ Unexpected error: {str(e)}")
        print("Please check the error and try again.")
        return 1

if __name__ == "__main__":
    sys.exit(main())